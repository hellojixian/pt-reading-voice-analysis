"""
Êï∞ÊçÆÊúçÂä°
Êèê‰æõÊï∞ÊçÆÂ∫ìËÆøÈóÆÂíå‰π¶Á±çÊï∞ÊçÆÁÆ°ÁêÜÂäüËÉΩ
"""
import os
import json
import tempfile
from typing import Optional, Dict, List, Any

# Êï∞ÊçÆÂ∫ìËøûÊé•
import snowflake.connector

# Êñá‰ª∂Ë∑ØÂæÑÂ∑•ÂÖ∑ÂáΩÊï∞
from utils.file_utils import ensure_directory_exists

class DataService:
    """
    Êï∞ÊçÆÊúçÂä°Á±ª

    Â§ÑÁêÜÊï∞ÊçÆÂ∫ìËøûÊé•„ÄÅ‰π¶Á±çÊï∞ÊçÆËé∑ÂèñÂíåÁºìÂ≠òÁÆ°ÁêÜ„ÄÇ

    Â±ûÊÄß:
        conn: Êï∞ÊçÆÂ∫ìËøûÊé•ÂØπË±°
        cache_dir: ÁºìÂ≠òÁõÆÂΩï
    """

    def __init__(self,
                snowflake_user: Optional[str] = None,
                snowflake_password: Optional[str] = None,
                snowflake_account: Optional[str] = None,
                cache_dir: Optional[str] = None):
        """
        ÂàùÂßãÂåñÊï∞ÊçÆÊúçÂä°

        ÂèÇÊï∞:
            snowflake_user (Optional[str]): SnowflakeÁî®Êà∑ÂêçÔºåÈªòËÆ§‰ªéÁéØÂ¢ÉÂèòÈáèËé∑Âèñ
            snowflake_password (Optional[str]): SnowflakeÂØÜÁ†ÅÔºåÈªòËÆ§‰ªéÁéØÂ¢ÉÂèòÈáèËé∑Âèñ
            snowflake_account (Optional[str]): SnowflakeË¥¶Êà∑ÔºåÈªòËÆ§‰ªéÁéØÂ¢ÉÂèòÈáèËé∑Âèñ
            cache_dir (Optional[str]): ÁºìÂ≠òÁõÆÂΩïË∑ØÂæÑÔºåÈªòËÆ§‰∏∫È°πÁõÆÊ†πÁõÆÂΩï‰∏ãÁöÑcacheÁõÆÂΩï

        Á§∫‰æã:
            >>> service = DataService()  # ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑÈÖçÁΩÆ
            >>> service = DataService(snowflake_user="user", snowflake_password="pass", snowflake_account="acct")  # Ëá™ÂÆö‰πâÈÖçÁΩÆ
        """
        self.conn = None
        self.snowflake_user = snowflake_user or os.getenv("SNOWFLAKE_USER")
        self.snowflake_password = snowflake_password or os.getenv("SNOWFLAKE_PASSWORD")
        self.snowflake_account = snowflake_account or os.getenv("SNOWFLAKE_ACCOUNT")

        # ËÆæÁΩÆÁºìÂ≠òÁõÆÂΩï
        if cache_dir:
            self.cache_dir = cache_dir
        else:
            # ÈªòËÆ§ÁºìÂ≠òÁõÆÂΩïÂú®È°πÁõÆÊ†πÁõÆÂΩï‰∏ãÁöÑcacheÁõÆÂΩï
            self.cache_dir = os.path.join(os.path.dirname(__file__), "..", "..", "cache")
            ensure_directory_exists(self.cache_dir)

    def get_db_connection(self):
        """
        Ëé∑ÂèñÊï∞ÊçÆÂ∫ìËøûÊé•ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂàõÂª∫Êñ∞ËøûÊé•

        ËøîÂõû:
            Êï∞ÊçÆÂ∫ìËøûÊé•ÂØπË±°

        Á§∫‰æã:
            >>> conn = data_service.get_db_connection()
            >>> cursor = conn.cursor()
        """
        if self.conn is None:
            self.conn = snowflake.connector.connect(
                user=self.snowflake_user,
                password=self.snowflake_password,
                account=self.snowflake_account
            )
        return self.conn

    def close_db_connection(self):
        """
        ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•

        Á§∫‰æã:
            >>> data_service.close_db_connection()
        """
        if self.conn is not None:
            self.conn.close()
            self.conn = None

    def fetch_book_content(self, book_id: str) -> Optional[Dict[str, Any]]:
        """
        Ê†πÊçÆ‰π¶Á±çIDËé∑Âèñ‰π¶Á±çÂÜÖÂÆπ

        ÂèÇÊï∞:
            book_id (str): ‰π¶Á±çID

        ËøîÂõû:
            Optional[Dict[str, Any]]: ÂåÖÂê´‰π¶Á±çID„ÄÅÊ†áÈ¢ò„ÄÅÊèèËø∞ÂíåÂÜÖÂÆπÁöÑÂ≠óÂÖ∏ÔºåÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõûNone

        Á§∫‰æã:
            >>> book = data_service.fetch_book_content("12345-1")
            >>> if book:
            >>>     print(f"Book title: {book['book_title']}")
        """
        sql = f"""
        SELECT distinct PERMANENT_ID, TITLE, DESCRIPTION, EXTENDED_BOOK_INFO
        FROM FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.REGULAR_BOOK RB
                 INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK PB ON PB.PUBLISHED_BOOK_ID = RB.ID
                 INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK_ENVIRONMENTS PBE
                            ON PBE.PUBLISHED_BOOK_ID = PB.ID
                 INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.ENVIRONMENT E
                            ON E.ID = PBE.ENVIRONMENTS_ID
                 INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.BOOK_EXTENDED_INFO BEI on BEI.BOOK_ID = RB.ID
            AND E.NAME = 'production'
            AND RB.PERMANENT_ID = '{book_id}';
        """
        print(f"üìä Ëé∑Âèñ‰π¶Á±çÂÜÖÂÆπ: {book_id}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            cursor.execute(sql)
            rows = cursor.fetchall()
            cursor.close()

            if not rows:
                return None

            # Ëß£ÊûêÊâ©Â±ï‰ø°ÊÅØËé∑Âèñ‰π¶Á±çÂÜÖÂÆπ
            extended_info = json.loads(rows[0][3])
            book_content = ""
            for page in extended_info:
                book_content += page["rawText"] + "\n"

            return {
                "book_id": rows[0][0],
                "book_title": rows[0][1],
                "book_description": rows[0][2],
                "book_content": book_content
            }

        except Exception as e:
            print(f"‚ö†Ô∏è Ëé∑Âèñ‰π¶Á±çÂÜÖÂÆπÈîôËØØ: {str(e)}")
            return None

    def fetch_all_production_books(self) -> str:
        """
        Ëé∑ÂèñÊâÄÊúâÁîü‰∫ßÁéØÂ¢É‰∏≠ÁöÑ‰π¶Á±ç‰ø°ÊÅØÔºåÂπ∂ÁºìÂ≠òÂà∞Êñá‰ª∂‰∏≠

        ËøîÂõû:
            str: ÁºìÂ≠òÊñá‰ª∂Ë∑ØÂæÑ

        Á§∫‰æã:
            >>> cache_file = data_service.fetch_all_production_books()
            >>> print(f"‰π¶Á±çÊï∞ÊçÆÂ∑≤ÁºìÂ≠òÂà∞: {cache_file}")
        """
        # Ê£ÄÊü•ÁºìÂ≠òÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
        cache_file = os.path.join(self.cache_dir, "production_books.json")
        if os.path.exists(cache_file):
            print(f"üìö ‰ΩøÁî®ÁºìÂ≠òÁöÑ‰π¶Á±çÊï∞ÊçÆ: {cache_file}")
            return cache_file

        print("üìä Ëé∑ÂèñÊâÄÊúâÁîü‰∫ßÁéØÂ¢É‰∏≠ÁöÑ‰π¶Á±ç...")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            sql = """
            SELECT distinct PERMANENT_ID, TITLE, DESCRIPTION
            FROM FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.REGULAR_BOOK RB
                    INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK PB ON PB.PUBLISHED_BOOK_ID = RB.ID
                    INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK_ENVIRONMENTS PBE
                            ON PBE.PUBLISHED_BOOK_ID = PB.ID
                    INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.ENVIRONMENT E
                            ON E.ID = PBE.ENVIRONMENTS_ID
                AND E.NAME = 'production';
            """

            cursor.execute(sql)
            rows = cursor.fetchall()
            cursor.close()

            # Â∞ÜÊï∞ÊçÆËΩ¨Êç¢‰∏∫JSONÊ†ºÂºè
            library_data = ""
            for row in rows:
                json_data = {
                    "book_id": row[0],
                    "book_title": row[1],
                    "book_Description": row[2]
                }
                library_data += json.dumps(json_data) + "\n"

            # ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂Âπ∂ÂÜôÂÖ•Êï∞ÊçÆ
            ensure_directory_exists(self.cache_dir)
            with open(cache_file, 'w') as f:
                f.write(library_data)

            print(f"‚úÖ ‰π¶Á±çÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞: {cache_file}")
            return cache_file

        except Exception as e:
            print(f"‚ö†Ô∏è Ëé∑Âèñ‰π¶Á±çÊï∞ÊçÆÈîôËØØ: {str(e)}")

            # Â¶ÇÊûúÂá∫ÈîôÔºåÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑÁºìÂ≠òÊñá‰ª∂‰Ωú‰∏∫Â§áÁî®
            with open(cache_file, 'w') as f:
                f.write("")

            return cache_file

    def search_books_by_title(self, title: str) -> List[Dict[str, Any]]:
        """
        Ê†πÊçÆÊ†áÈ¢òÊêúÁ¥¢‰π¶Á±ç

        ÂèÇÊï∞:
            title (str): ‰π¶Á±çÊ†áÈ¢òÂÖ≥ÈîÆËØç

        ËøîÂõû:
            List[Dict[str, Any]]: ÂåπÈÖçÁöÑ‰π¶Á±çÂàóË°®

        Á§∫‰æã:
            >>> books = data_service.search_books_by_title("Adventure")
            >>> print(f"ÊâæÂà∞ {len(books)} Êú¨ÂåπÈÖçÁöÑ‰π¶Á±ç")
        """
        sql = f"""
        SELECT distinct PERMANENT_ID, TITLE, DESCRIPTION
        FROM FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.REGULAR_BOOK RB
                INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK PB ON PB.PUBLISHED_BOOK_ID = RB.ID
                INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.PUBLISHED_BOOK_ENVIRONMENTS PBE
                        ON PBE.PUBLISHED_BOOK_ID = PB.ID
                INNER JOIN FIVETRAN_DATABASE.PICKATALE_STUDIO_PROD_PUBLIC.ENVIRONMENT E
                        ON E.ID = PBE.ENVIRONMENTS_ID
            AND E.NAME = 'production'
            AND UPPER(RB.TITLE) LIKE UPPER('%{title}%');
        """

        print(f"üìä ÊêúÁ¥¢‰π¶Á±çÊ†áÈ¢ò: {title}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            cursor.execute(sql)
            rows = cursor.fetchall()
            cursor.close()

            results = []
            for row in rows:
                results.append({
                    "book_id": row[0],
                    "book_title": row[1],
                    "book_Description": row[2]
                })

            return results

        except Exception as e:
            print(f"‚ö†Ô∏è ÊêúÁ¥¢‰π¶Á±çÈîôËØØ: {str(e)}")
            return []
